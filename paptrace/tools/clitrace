#!/usr/bin/env python3

import json
import argparse


g_f_ids = {}
g_s_ids = {}


def load_traces(trace_file):
    with open(trace_file, "r") as f:
        data = json.load(f)
    traces = {}
    for trace in data["traces"]:
        sig = trace["sig"]
        if sig not in traces:
            traces[sig] = [trace]
        else:
            traces[sig].append(trace)
    return traces


def load_requests(requests_file):
    with open(requests_file, "r") as f:
        data = json.load(f)
    return data


def get_trace(traces, request):
    trace_list = traces[request["sig"]]
    if len(trace_list) == 0:
        raise Exception(f"No trace for {request['sig']}")
    for trace in trace_list:
        if trace["params"] == request["params"]:
            return trace
    raise Exception(
        f"No trace for {request['sig']} with params {request['params']}\n."
        f"Available traces: {trace_list}"
    )


def to_params_str(params):
    return ", ".join([f"{x['name']}={x['value']}" for x in params])


def to_summary(obj, symb="", indent=""):
    summary = ""
    if obj["type"] == "callee":
        params = f"{{{to_params_str(obj['params'])}}}"
        summary += f"{indent}{symb}{obj['sig']} @ {params}"
    elif obj["type"] == "stmt":
        summary += f"{indent}{symb}stmt_{obj['id']}"
    if "children" in obj:
        for child in obj["children"]:
            summary += f"\n{to_summary(child, '+ ', indent + '  ')}"
    return summary


def to_f_id(sig):
    global g_f_ids
    if sig not in g_f_ids:
        g_f_ids[sig] = f"f{len(g_f_ids)}"
    return g_f_ids[sig]


def to_s_id(id):
    global g_s_ids
    if id not in g_s_ids:
        g_s_ids[id] = f"s{id}"
    return g_s_ids[id]


def to_expr_list(obj, is_simple):
    expr = []
    if "children" in obj and len(obj["children"]) > 0:
        for child in obj["children"]:
            expr.extend(to_expr_list(child, is_simple))
    else:
        if obj["type"] == "stmt":
            expr.append(to_s_id(obj["id"]))
        elif obj["type"] == "callee":
            if is_simple:
                expr.append(to_f_id(obj["sig"]))
            else:
                params = to_params_str(obj["params"])
                expr.append(f"{to_f_id(obj['sig'])}({params})")
    return expr


def to_expr(trace, is_simple):
    rhs = " + ".join(to_expr_list(trace, is_simple))
    if is_simple:
        lhs = to_f_id(trace["sig"])
    else:
        params = to_params_str(trace["params"])
        lhs = f"{to_f_id(trace['sig'])}({params})"
    return f"{lhs} = {rhs}"


def handle_request(traces, request):
    trace = get_trace(traces, request)

    console_sep = "-" * 80
    print(f"\n{console_sep}")

    summary = to_summary(trace)
    print(f"Trace summary:\n{summary}")

    expr = to_expr(trace, is_simple=False)
    print(f"\nTrace expr (full):\n{expr}")
    expr = to_expr(trace, is_simple=True)
    print(f"\nTrace expr (simple):\n{expr}")


def main():
    parser = argparse.ArgumentParser(
        description="Command line utility for paptrace."
    )
    parser.add_argument(
        "trace_file", help="Path to paptrace generate JSON file."
    )
    parser.add_argument("request_file", help="Path to user request JSON file.")
    args = parser.parse_args()

    traces = load_traces(args.trace_file)
    requests = load_requests(args.request_file)

    for request in requests:
        handle_request(traces, request)


if __name__ == "__main__":
    main()
